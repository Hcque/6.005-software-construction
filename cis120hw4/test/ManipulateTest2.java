import org.junit.jupiter.api.*;

import static org.junit.Assert.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.Test;


/* DO NOT EDIT this file, we will not see your changes. 
 * Add your own JUnit test cases to MyTest.java */




/**
 * Tests some image manipulations.
 * 
 * Note that these tests are not comprehensive. Passing these tests is not
 * enough to consider this assignment complete. Be sure to test with the GUI
 * and write some of your own tests in PennstagramTest.
 */
public class ManipulateTest2 {

    /*
     * Methods to generate test cases.
     */

    public static PixelPicture smallSquare() {
        return new PixelPicture(new Pixel[][] {
            {Pixel.BLACK, Pixel.BLUE},
            {Pixel.RED,   Pixel.GREEN}
        });
    }

    public static PixelPicture smallSquareBorder() { 
        return new PixelPicture(new Pixel[][] {
            {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE},
            {Pixel.WHITE, Pixel.BLACK, Pixel.BLUE,  Pixel.WHITE},
            {Pixel.WHITE, Pixel.RED,   Pixel.GREEN, Pixel.WHITE}, 
            {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE}
        });
    }

    public static PixelPicture threeStripes(
            int r0, int g0, int b0,
            int r1, int g1, int b1,
            int r2, int g2, int b2) {
        Pixel [][] bmp = new Pixel[256][256];
        for (int row = 0; row < 256; row++) {
            for (int col = 0; col < 256; col++) {
                if (col > 200) {
                    bmp[row][col] = new Pixel(r0,g0,b0);
                } else if (col > 100) {
                    bmp[row][col] = new Pixel(r1,g1,b1);
                } else {
                    bmp[row][col] = new Pixel(r2,g2,b2);
                }
            }
        }
        return new PixelPicture(bmp);
    }

    public static PixelPicture testNewPic() {
        Pixel [][] bmp = new Pixel[256][256];
        for (int row = 0; row < 256; row++) {
            for (int col = 0; col < 256; col++) {
                bmp[row][col] = new Pixel(row, row + col, row ^ col);
            }
        }
        return new PixelPicture(bmp);
    }


    public static PixelPicture testNewPicCCW() {
        Pixel [][] bmp = new Pixel[256][256];
        for (int row = 0; row < 256; row++) {
            for (int col = 0; col < 256; col++) {
                bmp[255 - col][row] = new Pixel(row, row + col, row ^ col);
            }
        }
        return new PixelPicture(bmp);
    }


    public static PixelPicture doubleSmallSquareBorder() {
        return new PixelPicture(new Pixel[][] {
            {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE},
            {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE},
            {Pixel.WHITE, Pixel.WHITE, Pixel.BLACK, Pixel.BLUE,  Pixel.WHITE, Pixel.WHITE},
            {Pixel.WHITE, Pixel.WHITE, Pixel.RED,   Pixel.GREEN, Pixel.WHITE, Pixel.WHITE}, 
            {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE},
            {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE}
        });
    }

    /* ------ CW rotation, provided code ------- */

    @Test 
    public void rotateCwSmall() {
        assertEquals(
                0,
                PixelPicture.diff(
                        new PixelPicture(new Pixel[][] {
                            {Pixel.RED, Pixel.BLACK},
                            {Pixel.GREEN,Pixel.BLUE}
                        }),
                        SimpleManipulations.rotateCW(smallSquare())
                )
        );
    }

    /*  ---------------- Contrast -------------------- */

    @Test 
    public void contrastSmall() {
        assertTrue(
                36 >= // Lots of rounding error...
                PixelPicture.diff(
                        new PixelPicture(new Pixel [][] {
                            {new Pixel(32,32,32),  new Pixel(32,32,160)},
                            {new Pixel(160,32,32), new Pixel(32,160,32)}
                        }),
                        AdvancedManipulations.adjustContrast(smallSquare(), 0.5)
                )
        );
    }

    /*  ---------------- ReducePalette -------------------- */



    @Test 
    public void paletteTrivial() {
        PixelPicture s = threeStripes(10,10,10,255,255,255,0,0,0);
        assertEquals(
                0,
                PixelPicture.diff(
                        threeStripes(10,10,10,255,255,255,0,0,0),
                        AdvancedManipulations.reducePalette(s, 3)
                )
        );
    }

    @Test public void paletteInteresting() {
        PixelPicture s = threeStripes(0,0,0,255,255,255,10,10,10);
        assertEquals(
                0,
                PixelPicture.diff(
                        threeStripes(10,10,10,255,255,255,10,10,10),
                        AdvancedManipulations.reducePalette(s, 2)
                )
        );
    }




    /*--------------------Blur-------------------*/

    @Test 
    public void blurSmall() {
        assertTrue(
                12 >= //Off by one okay 
                PixelPicture.diff(
                        new PixelPicture(new Pixel[][] {
                            {new Pixel(63,63,63), new Pixel(63,63,63)},
                            {new Pixel(63,63,63),new Pixel(63,63,63)}
                        }),
                        AdvancedManipulations.blur(smallSquare(),1)
                )
        );
    }
}
